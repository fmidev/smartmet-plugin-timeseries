################################################################## 
# smartmet-engine-grid
################################################################## 

# This is a configuration file used by the module
# smartmet-engine-grid. The SmartMet server's configuration
# file for the "grid" engine should point to this file.

##################################################################



smartmet :
{
library :
{

grid-files :
{
  # Processing of grid/grib files requires a lot of configuration information. 
  # This information should be found from the file below. 

  configFile = "%(DIR)/../library/grid-files.conf"

  # If the data server is local then the grid file cache can be used to improve
  # performance. This cache is used caching uncompressed grid data. When the cache 
  # is full then the oldest data is automatically removed. The data that is packed
  # with "simple packing" method is not cached.
    
  cache :
  {
    numOfGrids         = 50000
    maxSizeInMegaBytes = 30000
   }
   
   
  # The point cache offers a fast access to grids and grid points that are accessed often.
  # Each grid contains own point cache. This cache is automatically cleared if the cache
  # hits are less than 'hitsRequired' during the last 'timePeriod' (seconds).

  pointCache :
  {
    enabled = false
    hitsRequired = 20
    timePeriod = 1200
  }
}

} # library


engine :
{
grid :
{

# The content server defines the source of the content information. Usually the master 
# content source is the Redis database. However,it can be also a memory-based content
# server or a caching content server, which are accessed by HTTP or CORBA.

# The Redis database is not usually fast enough for our searching purposes. That's why 
# its information is usally cached locally into the memory. In this case the content 
# information can be sorted so that it can be fetched very fast. In spite of that we
# can sort the current content information in many ways, we should not sort it all
# possible ways because this increases the memory consumtion and it also makes content
# updates slower. In practice, we should select the main content identifiers and sort
# the content information according to them. All the other information should be mapped
# to those identifiers when querying content information.

# If the content source itself is a caching content server then there is usually no need to 
# locally cache the same information. Caching content information makes content searching very 
# fast but it might required a lot of memory. That's why it usually makes sense to use a remote 
# caching server if that is possible. On the other hand this means that the grid engine can start 
# much faster because it does not need to cache content information first.

content-server :
{
    
  content-source : 
  {
    # Content source type (redis/corba/http/file)

    type = "redis"

    redis :
    {
      address          = "127.0.0.1"
      port             = 6380
      tablePrefix      = "test."
      secondaryAddress = "127.0.0.1"
      secondaryPort    = 6380
      lockEnable       = false;
    }

    
    corba :
    {
      ior          = ""
    }


    http :
    {
      url          = ""
    }
    
    file :
    {
      # This selection means in practice that a memory-based contentServer is embedded into the grid-engine.
      # It gets its content information from CSV-files that can be found from the "contentDir". It monitors 
      # the state of these files and automatically updates changes into its memory structures.  Notice that
      # if this content source is selected then there is no need use for the local cache.

      contentDir          = "$(HOME)/Data"
      
      # Content sorting flags:
      # ---------------------
      #  bit 0 (1)  : reserved 
      #  bit 1 (2)  : Sort by fmi-id (radonParameterId)
      #  bit 2 (4)  : Sort by fmi-name (radonParameterName)
      #  bit 3 (8)  : Sort by grib-id
      #  bit 4 (16) : Sort by newbase-id
      #  bit 5 (32) : Sort by newbase-name
      #  bit 6 (64) : Sort by cdm-id
      #  bit 7 (128): Sort by cdm-name

      # (1 + 4 + 8)
      contentSortingFlags = 13
      
      # Size of the event list. If there are no local cache then this size should be 0.
      # Otherwise it should be quite big (1000000 - 5000000) 
    
      eventListMaxSize = 0                   
    }      
    
  }


  ######  The local (caching) content server. 

  cache :
  {
    enabled = true
    
    # Content sorting flags:
    # -------------------
    #  bit 0 (1)  : reserved 
    #  bit 1 (2)  : Sort by fmi-id (radonParameterId)
    #  bit 2 (4)  : Sort by fmi-name (radonParameterName)
    #  bit 3 (8)  : Sort by grib-id
    #  bit 4 (16) : Sort by newbase-id
    #  bit 5 (32) : Sort by newbase-name
    #  bit 6 (64) : Sort by cdm-id
    #  bit 7 (128): Sort by cdm-name

    # (1 + 4 + 8)
    contentSortingFlags = 13
    
    # Should the get requests be forwarded to the original content source when the cache update is in progress 
    requestForwardEnabled = false   
  }
 
  
  processing-log :
  {
    enabled      = false
   file         = "/dev/stdout"
#   file         = "/tmp/contentServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/tmp/contentServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
}



# The data server is responsible for fetching actual data from the grid files. It is possible
# to use a local or a remote data server. The data server uses also a lot of memory and maps
# grid files into virtual memory. That's why it would be smarter to use shared data servers
# when possible. On the other hand, the remote data server is usually always up and running
# which means that it can be used immediately. If the data server is local then it
# takes some time to start the system and make sure that all grid files are available.
# If the remote data server is disabled then the local data server is used in the engine.

data-server :
{
  ######  The remote data server. Notice that the remote data server has its own configuration file.
  
  remote  = false
  caching = false
  ior     = ""


  ######  The local data server. These settings are valid when the "remote" attribute is "false".

  # Location of grid files.

  grid-storage : 
  {
    directory = "/usr/share/smartmet/test/data"  
    memoryMapCheckEnabled = false
    preloadEnabled = false
    preloadFile = "%(DIR)/preload.csv" 
    preloadMemoryLock = false
    counterFile = "%(DIR)/requestCounters.csv" 
  }

    
  # The data server can generate "virtual grid files" that are based on
  # existing grid files. The definition file is used in order to define
  # requirements (= required parameters) and rules (= LUA function) for 
  # new virtual files.  
       
  virtualFiles :
  {
    enabled = false
    definitionFile = "%(DIR)/vff_convert.csv"
  }
  
  # LUA files are usually needed for generating content for the virtual
  # files. In practice, each virtual file definition contains the name
  # of the LUA function that needs to be called when the data of 
  # the current virtual file is requested.
  
  luaFiles = 
  [
    "%(DIR)/vff_convert.lua"
  ];

  processing-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#   file         = "/tmp/dataServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "/tmp/dataServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}


# The query server is responsible for making data queries to the data server according
# to the content information that it gets from the content server. Also the query server
# can be local or remote. Sometimes it is smarter to locate the query server closer to 
# the content server and the data server, because there might be a lot traffic between them.
# If the remote query server is disabled then the local query server is used in the engine.

query-server :
{
  remote  = false
  ior     = ""

  # If you want to search data from a certain producer then this producer must be listed in 
  # this file. On the other hand, this file defines the search order of the producers and geometries 
  # in the case of that the producer or the geometry is not defined.  
  
  producerFile = "%(DIR)/producers_test.csv"
  
  # The producer mapping files are used for mapping newbase producers and parameters to the correct
  # grib producers, gemetries and level types. 
  
  producerMappingFiles = 
  [
    "%(DIR)/producerAlias_test.cfg"    
  ];
   
  queryCache :
  {
    # A query object is removed from the cache if it accessed in this time (seconds). 
    
    enabled = false
    maxAge = 300
  }
   
  # If the gridEngine notices that there are not valid mappings available for all
  # parameters found from the contentServer, then it automatically adds these unmapped
  # parameters to the following files. The queryServer needs these mappings in order to
  # find the current parameters. You can move these automatically generated mappings into
  # a more permanent mapping file (mappings_fmi_auto.csv => mappings_fmi.csv). On the other
  # hand, when the permanent mapping files are empty then you can get your basic mapping
  # settings from these automatically generated files (i.e. when you are first time 
  # configuring your system).
  
  
  # 1 = FMI_ID, 2 = FMI_NAME, 3 = GRIB_ID, 4 = NEWBASE_ID, 5 = NEWBASE_NAME, 6 = CDM_ID, 7 = CDM_NAME
  
  mappingTargetKeyType = 2 
    
  mappingUpdateFile :
  {
    fmi     = "%(DIR)/mapping_fmi_auto.csv"
    newbase = "%(DIR)/mapping_newbase_auto.csv"
  }
  
  luaFiles = 
  [
    "%(DIR)/function_basic.lua",
    "%(DIR)/function_interpolation.lua",
    "%(DIR)/function_conversion.lua",
    "%(DIR)/function_newbase.lua",
    "%(DIR)/function_demo.lua"
  ];
  
  mappingFiles =
  [
    "%(DIR)/mapping_fmi_test.csv",
    "%(DIR)/mapping_newbase_test.csv"
  ];

  aliasFiles =
  [
    "%(DIR)/alias_demo.cfg",
    "%(DIR)/alias_newbase_extension.cfg"
  ];

  processing-log :
  {
    enabled      = false
#    file         = "/dev/stdout"
    file         = "/tmp/queryServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
#    file         = "/dev/stdout"
    file         = "/tmp/queryServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}

}
}
}

